# Esse fluxo de trabalho usa ações que não são certificadas pelo GitHub.
# Eles são fornecidos por terceiros e são governados por
# termos de serviço separados, política de privacidade e suporte
# documentação.

# Esse fluxo de trabalho criará, testará, assinará e empacotará um aplicativo de desktop WPF ou Windows Forms
# construído no .NET Core.
# Para aprender a migrar seu aplicativo existente para o .NET Core
# consulte https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# Para configurar este fluxo de trabalho :
#
# 1. Configure variáveis de ambiente
# O GitHub define variáveis de ambiente padrão para cada execução de fluxo de trabalho.
# Substitua as variáveis relativas ao seu projeto na seção "env" abaixo.
#
# 2. Assinando
# Gere um certificado de assinatura no aplicativo Windows
# Projeto de embalagem ou adicione um certificado de assinatura existente ao projeto.
# Em seguida, use o PowerShell para codificar o arquivo .pfx usando a codificação Base64
# executando o seguinte script Powershell para gerar a sequência de saída :
#
# $ pfx_cert = Get-Content '.\ SigningCertificate.pfx '-Encoding Byte
# [System.Convert] :: ToBase64String ($ pfx_cert) | Arquivo externo 'SigningCertificate_Encoded.txt'
#
# Abra o arquivo de saída, SigningCertificate_Encoded.txt, e copie o
# corda dentro. Em seguida, adicione a string ao repo como um segredo do GitHub
# e nomeie-o "Base64_Encoded_Pfx."
# Para mais informações sobre como configurar seu certificado de assinatura
# neste fluxo de trabalho, consulte https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Por fim, adicione a senha do certificado de assinatura ao repo como segredo e nomeie-o como "Pfx_Key".
# Consulte "Construa o projeto Windows Application Packaging" abaixo para ver como o segredo é usado.
#
# Para obter mais informações sobre as ações do GitHub, consulte https://github.com/features/actions
# Para que uma amostra completa de IC / CD comece com os fluxos de trabalho do GitHub Action para aplicativos de desktop,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
